z
z<-y[!is.na(subset)]
z<-y[!is.na(y)]
z
y
mean(z)
View(y)
x
s<-subset(x, select=Solar.R, Ozone>31, Temp>90)
s<-subset(x, ncol=2, Ozone>31, Temp>90)
s
print(s)
s<-subset(x, select=Solar.R, Ozone>31, Temp>90)
above<-subset(x, Ozone>31  & Temp>90)
above
above_solar<-subset(above, Solar.R)
below<-subset(x, !above)
below
below<-subset(x!=above)
below<-subset(x, Ozone!>31  & Temp!>90)
below<-subset(x, !Ozone>31  & !Temp>90)
below
mean(below)
below_sol<-subset(below, Solar.R)
below_sol<-subset(!is.na(below))
below_sol
below_sol<-subset(below[!is.na(below)])
below_sol<-below[!is.na(below)]
below_sol
sol<-subset(below, Solar.R)
sol<-subset(below, ncol=2)
sol
sol<-below[ncol=2]
sol<-below(ncol=2)
sol<-subset(below)
sol
View(below)
mean(below)
colMeans(below)
colMeans(below, na.rm=FALSE)
below<-subset(x, !Ozone>31  & !Temp>90 & !is.na(x))
below
below<-subset(x, !Ozone>31  & !Temp>90)
below
y
View(y)
below<-subset(x, !Ozone>31  & !Temp>90 & x[!is.na(x)])
below<-subset(x, !Ozone>31  & !Temp>90)
below_sol<-select(below, Solar.R)
below_sol<-below[Solar.R]
colMeans(below)
colMeans(below, !is.na(below))
below
below<-subset(x, !Ozone>=31  & !Temp>=90)
colMeans(below, !is.na(below))
colMeans(above, !is.na(above))
colMeans(x,!is.na(x)&Month=6)
colMeans(x,!is.na(x) & Month=6)
colMeans(x,!is.na(x) & "Month"=6)
colMeans(x, Month=6)
colMeans(x, "Month"=6)
colMeans(x, Month="6")
colMeans(x, "Month"="6")
month_six<-subset(x, Month=6)
month_six
month_six<-subset(x, Month==6)
month_six
colMeans(month_six)
month_five<-subset(x, Month==5)
max(month_five)
month_five
m5<-month_five[!is.na(month_five)]
m5
colMeans(month_five, !is.na(month_five))
max(x)
max(month_five, !is.na(month_five))
m5<-!is.na(month_five)
m5
m5<-month_five(!is.na(month_five))
m5<-month_five[!is.na(month_five)]
m5
padz <- function(x, n=max(nchar(x))) gsub(" ", "0", formatC(x, width=n))
pollutantMean <- function(directory='.', pollutant = 'nitrate', id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
oldDirectory <- getwd()
setwd(directory)
# checking the input pollutant
if(!(pollutant %in% c('nitrate', 'sulfate')))
{
return(paste("error! could not find pollutant:", pollutant))
}
numFiles <- length(id)
filenames <- array(numFiles)
for (i in 1:numFiles)
{
filenames[i] <- paste(padz(id[i],3),'.csv', sep='')
}
print(filenames)
}
pollutantMean('.', 'sulfate', 99:103)
pollutantMean('.', 'nonsense', 99:103)
?read.csv
read.csv(filenames[1])
?array
return(allMeans)
source('C:/Users/ZSUZSI/Desktop/R/specdata/solution.R')
pollutantMean(nitrate,3:5)
pollutantMean(C:/Users/ZSUZSI/Desktop/R/specdata,"nitrate",3:5)
pollutantMean('.', 'nitrate', 3:5)
get(wd)
getwd
getwd()
pollutantMean('C:/Users/ZSUZSI/Desktop/R/specdata', 'nitrate', 3:5)
pollutantMean('C:/Users/ZSUZSI/Desktop/R/specdata', 'nitrate', )
install.packages("KernSmooth")
library(KernSmooth)
load("C:/Data Science/R Programming/specdata/001.csv")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
source("C:/Data Science/R Programming/specdata")
library(xlsx)
install.packages(c("digest", "httr", "manipulate", "RCurl", "stringr", "testthat"))
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
library(xlsx)
library(rJava)
library(rJava)
library(xlsx)
library(xlsx)
library(rJava)
library(rJava)
library(xlsx)
mean(3)
mean(4,5)
install.packages("ReacTran")
??ReacTran
??ReacTran
install.packages("phreeqc")
phrLoadDatabaseString(phreeqc.dat)
phrSetOutputStringsOn(TRUE)
phrRunString(ex11)
phrGetOutputStrings()
library("phreeqc")
phrLoadDatabaseString(phreeqc.dat)
phrSetOutputStringsOn(TRUE)
phrRunString(ex11)
phrGetOutputStrings()
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
for(i in cell){
#subsetting the data for chosen cells
cellSubset <- filter(ionData, soln==i)
ggplot(cellSubset, aes(step, colour = ions))+
geom_line(aes(y = K, colour = "K"))+
geom_line(aes(y = Mg, colour = "Mg"))+
geom_line(aes(y = Ca, colour = "Ca"))+
geom_line(aes(y = Fe, colour = "Fe"))+
geom_line(aes(y = Si, colour = "Si"))+
geom_line(aes(y = Al, colour = "Al"))+
geom_line(aes(y = Na, colour = "Na"))+
scale_y_log10()+
labs(title = paste("cell", i), x = "step/shift", y = "conc.")
}
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/GIF teszt.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott idoben, összes cellára.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott cellára, idoben.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott idoben, összes cellára.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott cellára, idoben.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott idoben, összes cellára.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott cellára, idoben.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott idoben, összes cellára.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott idoben, összes cellára.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott cellára, idoben.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott cellára, idoben.R')
source('C:/4_MFGI/Modellek/PHREEQC/Tesztek/termodinamikus transzport elemzés_ionok_adott idoben, összes cellára.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
View(munkaidodata)
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
summaise(munkaidodata$intervallum)
library(dplyr)
summaise(munkaidodata$intervallum)
z
summarise(munkaidodata$intervallum)
source('C:/4_MFGI/munkaidoelemzes.R')
munkaidodata$month<-format(munkaidodata$datum, "%b")
munkaidodata$month<-as.factor(format(munkaidodata$datum, "%b"))
source('C:/4_MFGI/munkaidoelemzes.R')
munkaidodata$datum
format(munkaidodata$datum, "%m")
print(as.factor(format(munkaidodata$datum, "%m")))
munkaidodata$month<-print(format(munkaidodata$datum, "%m"))
source('C:/4_MFGI/munkaidoelemzes.R')
format(munkaidodata$datum, "%m")
format(munkaidodata$datum, "%M")
munkaidodata$month<-month(munkaidodata$datum)
require(lubridate)
munkaidodata$month<-month(munkaidodata$datum)
str(munkaidodata)
munkaidodata$month<-as.factor(month(munkaidodata$datum))
View(munkaidodata)
source('C:/4_MFGI/munkaidoelemzes.R')
summarise(group_by(munkaidodata, month), mean(munkaidodata$intervallum))
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
group_by(munkaidodata, month)
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
print(summarise(group_by(munkaidodata, month), sum(munkaidodata$plussznincsebed)*60))
print(summarise(group_by(munkaidodata, month), sum(munkaidodata$plussznincsebed*60)))
source('C:/4_MFGI/munkaidoelemzes.R')
utolsohonap<-summarise(group_by(munkaidodata, max(month))
)
munkaidodata$month<-month(munkaidodata$datum)
utolsohonap<-summarise(group_by(munkaidodata, max(month)))
View(utolsohonap)
View(utolsohonap)
utolsohonap<-group_by(munkaidodata, max(month))
View(utolsohonap)
utolsohonap<-filter(munkaidodata, max(month))
utolsohonap<-filter(munkaidodata, month==max(month))
View(utolsohonap)
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/4_MFGI/munkaidoelemzes.R')
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
if (wday(stepData$date) < 6) {stepData$daytype <- "weekday"}
View(stepData)
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
stepData$daynumber <- wday(stepData$date)
View(stepData)
for (i in stepData$daynumber) {
if (wday(i) %in% 1:6) {stepData$daytype <- "weekday"}
else {stepData$daytype <- "weekend"}
}
stepData$daynumber <- wday(stepData$date)
stepData$daytype <- c()
#sapply(if (stepData$daynumber<6) stepData$daytype <- c("weekday") else stepData$daytype <- c("weekend")
for (i in stepData$daynumber) {
if (wday(i) %in% 1:6) {stepData$daytype <- "weekday"}
else {stepData$daytype <- "weekend"}
}
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
length(stepData$daynumber)
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
stepData$daynumber <- wday(stepData$date)
stepData$daytype <- c()
stepData$daytype <- c()
View(stepDataMod)
View(stepData)
stepData$daytype <- c(1:5)
stepData$daynumber <- wday(stepData$date)
stepData$daytype <- factor(c("weekday","weekend"))
View(stepData)
stepData$daynumber <- wday(stepData$date)
stepData$daytype <- factor(c())
rm(list=ls())
library(lubridate)
library(ggplot2)
library(dplyr)
setwd("C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1")
#Read data into memory
stepData <- read.csv("activity.csv")
#Prepare data for analysis by 1. adding zeros to "interval" until all have 4 characters, 2. pasting
#"date" and "interval" together and 3. formatting the date and time information.
#stepData$datetime <- parse_date_time(paste(stepData$date, sprintf("%04d", stepData$interval)), "y-m-d Hm")
#Without missing values
#1.	Calculate the total number of steps taken per day
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
#2.	If you do not understand the difference between a histogram and a barplot, research the difference
#between them. Make a histogram of the total number of steps taken each day
print(qplot(dailySteps$totalsteps, geom="histogram",
xlab = "total steps per day",
ylab = "count of days when it happened",
main = "Histogram of total steps per day, n = 61"))
#3.	Calculate and report the mean and median of the total number of steps taken per day
print(paste("mean:", round(mean(dailySteps$totalsteps), digits=0)))
print(paste("median:", median(dailySteps$totalsteps)))
#4.	Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number
#of steps taken, averaged across all days (y-axis)
intervalSteps <- summarise(group_by(stepData, interval),
"average steps in interval" = mean(steps, na.rm=TRUE))
print(qplot(intervalSteps$interval, intervalSteps$`average steps in interval`, geom="line",
xlab = "hours-minutes of the day",
ylab = "average number of steps per 5-minute interval",
main = "Time series of the 5-minute interval and the average number of steps taken"))
#5.	Which 5-minute interval, on average across all the days in the dataset, contains the maximum number
#of steps?
intervalSteps$interval[max(intervalSteps$`average steps in interval`)]
#With missing values
#1.  Calculate and report the total number of missing values in the dataset (i.e. the total number of
#rows with NAs)
length(stepData$steps[is.na(stepData$steps)])
#2.	Devise a strategy for filling in all of the missing values in the dataset. The strategy does not
#need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that
#5-minute interval, etc.
#I use intervalSteps containing the mean for all 5-minute intervals exclusing NA-s
#3.	Create a new dataset that is equal to the original dataset but with the missing data filled in.
stepDataMod <- left_join(stepData, intervalSteps, by=rownames(interval))
stepDataMod$steps[is.na(stepDataMod$steps)] <- stepDataMod$`average steps in interval`
#4.	Make a histogram of the total number of steps taken each day and Calculate and report the mean and
#median total number of steps taken per day. Do these values differ from the estimates from the first
#part of the assignment? What is the impact of imputing missing data on the estimates of the total daily
#number of steps?
dailyStepsMod <- summarise(group_by(stepDataMod, date),
"totalsteps" = sum(steps, na.rm=TRUE))
print(qplot(dailyStepsMod$totalsteps, geom="histogram",
xlab = "total steps per day",
ylab = "count of days when it happened",
main = "Modified histogram of total steps per day, n = 61"))
print(paste("modified mean:", round(mean(dailyStepsMod$totalsteps), digits=0)))
print(paste("modified median:", round(median(dailyStepsMod$totalsteps), digits=0)))
#5.	Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating
#whether a given date is a weekday or weekend day.
stepData$daynumber <- wday(stepData$date)
stepData$daytype <- factor(c())
stepData$daynumber <- weekdays(stepData$date)
stepData$daynumber <- weekdays(as.Date(stepData$date))
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
if (stepData$day %in% c("Saturday","Sunday") {stepData$daytype <- "weekday"} else {stepData$daytype <- "weekend"}
if (stepData$day %in% c("Saturday","Sunday")) {stepData$daytype <- "weekday"} else {stepData$daytype <- "weekend"}
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
stepData$day <- weekdays(as.Date(stepData$date))
for (i in length(stepData$day)){
if (stepData$day[i] %in% c("Saturday","Sunday")) {stepData$daytype[i] <- "weekday"} else {stepData$daytype[i] <- "weekend"}
}
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
length(stepData$day)
for (i in stepData$day){
#if (stepData$day[i] %in% c("Saturday","Sunday")) {
stepData$daytype[i] <- "weekday"
#} else {stepData$daytype[i] <- "weekend"}
}
for (i in 1:17568){
#if (stepData$day[i] %in% c("Saturday","Sunday")) {
stepData$daytype[i] <- "weekday"
#} else {stepData$daytype[i] <- "weekend"}
}
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
stepData$day[2]
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
View(stepData)
View(intervalSteps)
daytypeIntervalSteps <- summarise(group_by(stepData, interval, daytype), "average steps in interval" = mean(steps, na.rm=TRUE))
View(daytypeIntervalSteps)
daytypeIntervalSteps <- summarise(group_by(stepData, daytype, interval), "average steps in interval" = mean(steps, na.rm=TRUE))
print(qplot(daytypeIntervalSteps$interval, daytypeIntervalSteps$`average steps in interval`, facets="daytype", geom="line",
xlab = "hours-minutes of the day",
ylab = "average number of steps per 5-minute interval",
main = "Time series of the 5-minute interval and the average number of steps taken"))
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
print(qplot(daytypeIntervalSteps$interval, daytypeIntervalSteps$`average steps in interval`, facets=daytypeIntervalSteps$daytype, geom="line",
xlab = "hours-minutes of the day",
ylab = "average number of steps per 5-minute interval",
main = "Time series of the 5-minute interval and the average number of steps taken"))
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
daytypeIntervalSteps <- summarise(group_by(stepData, daytype, interval), "average steps in interval" = mean(steps, na.rm=TRUE))
print(qplot(daytypeIntervalSteps$interval, daytypeIntervalSteps$`average steps in interval`, facets = .~daytype, geom="line",
xlab = "hours-minutes of the day",
ylab = "average number of steps per 5-minute interval",
main = "Time series of the 5-minute interval and the average number of steps taken"))
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
intervalSteps <- summarise(group_by(stepData, interval),
"average steps in interval" = mean(steps, na.rm=TRUE))
print(qplot(intervalSteps$interval, intervalSteps$`average steps in interval`, data=intervalSteps, geom="line",
xlab = "hours-minutes of the day",
ylab = "average number of steps per 5-minute interval",
main = "Time series of the 5-minute interval and the average number of steps taken"))
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
source('C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1/PA1_template.R')
stepData <- read.csv("activity.csv")
View(stepData)
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
library(dplyr)
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
View(dailySteps)
rm(list=ls())
library(lubridate)
library(ggplot2)
library(dplyr)
setwd("C:/Data Science/5. Reproducible Research/Assignment1/RepData_PeerAssessment1")
stepData <- read.csv("activity.csv")
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
View(dailySteps)
View(dailySteps)
qplot(dailySteps$totalsteps, geom="histogram",
xlab = "total steps per day",
ylab = "count of days when it happened",
main = "Histogram of total steps per day, n = 61")
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps))
qplot(dailySteps$totalsteps, geom="histogram",
xlab = "total steps per day",
ylab = "count of days when it happened",
main = "Histogram of total steps per day, n = 61")
View(dailySteps)
stepData <- read.csv("activity.csv")
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
qplot(dailySteps$totalsteps, geom="histogram",
xlab = "total steps per day",
ylab = "count of days when it happened",
main = "Histogram of total steps per day, n = 61")
print(paste("mean:", round(mean(dailySteps$totalsteps), digits=0)))
print(paste("median:", median(dailySteps$totalsteps)))
intervalSteps <- summarise(group_by(stepData, interval),
"average steps in interval" = mean(steps, na.rm=TRUE))
View(intervalSteps)
intervalSteps <- summarise(group_by(stepData, interval),
"average steps in interval" = mean(steps, na.rm=TRUE))
qplot(intervalSteps$interval, intervalSteps$`average steps in interval`, data=intervalSteps, geom="line",
xlab = "hours-minutes of the day",
ylab = "average number of steps per 5-minute interval",
main = "Time series of the 5-minute interval and the average number of steps taken")
intervalSteps$interval[max(intervalSteps$`average steps in interval`)]
intervalSteps$interval[intervalSteps$`average steps in interval`==max(intervalSteps$`average steps in interval`)]
dailySteps <- summarise(group_by(stepData, date, na.rm=TRUE),
"totalsteps" = sum(steps))
View(dailySteps)
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
dailySteps <- dailySteps[dailySteps$totalsteps!=0]
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
dailySteps <- summarise(group_by(stepData, date),
"totalsteps" = sum(steps, na.rm=TRUE))
View(dailySteps)
dailySteps <- filter(dailySteps, dailySteps$totalsteps!=0)
